In this Chapter
>> Looking at the HTML5 document structure
>> Identifying the basic HTML5 elements
>> Formatting text
>> Using special characters
>> Creating lists
>> Working with tables.

Chapter 1
---------
The Basics of HTML5


The core of your web application is the HTML5 code you create to present the content to your site visitors.
You need an understanding of how HTML5 works and how to use it to be best present your information.
This chapter describes the basics of HTML5 and demonstrates how to use it to create web pages.

Diving into Document Structure

The HTML5 standard defines a specific structure that you must follow when defining your web pages so that they appear the same way in all browsers.
This structure includes not only the markups that you use to tell browsers how to display your web page content, but also some overhead information you need to provide to the browser.
This section explains the overall structure of an HTML5 program, and tells you what you need to include to ensure your clients' browsers know how to work with your web pages correctly.

Elements, tags, and attributes
An HTML5 document consists of one or more elements.
An element is any object contained within your web page.
That can be headings, paragraphs of text, form fields, or even multimedia clips.
Your browser works with each element individually, positioning it in the browser window and styling it as directed.

You define elements in your web page by using tags.
A tag identifies the type of element so the browser knows just how to handle the content it contains.
The HTML5 specification defines two types of elements:

>>Two-sided elements: Two-sided elements are the more common type of element.
A two-sided element contains two parts: an opening tag and a closing tag.
The syntax for a two-sided element looks like this:
<element>content</content>

The first element tag is opening tag.
It contains the element name, surrounded by the less-than symbol (<) and greater-than symbol (>), and defines the start of the element defintion.

The second tag is the closing tag; it defines the end of the element definition.
It points to the same element name, but the name is preceded by a forward slash(/).
The browser should handle any content between the two tags as part of the element content.
For example, the HTML5 h1 element defines a heading like this:
<h1> This is a heading</h1>
The element instructs the browser to display the text This is a heading using the font and size appropriate for a heding on the web page.
It's up to the browser to determine just how to do that.

>>One-side elements: One-sided elements don't contain any content and usually define some type of directive for the browser to take in the web page.
For example, the line break element instructs the browser to start a new line in the web page:
<br>

TIP:
Because there's no content, there's no need for a closing tag.
The older XHTML standard requires that one-sided tags included a closing forward slash character at the end of the tag, such as <br/>.
This isn't required by HTML5, but it's supported for backward compatibility.
It's very common to still see that format used in HTML5 code.

Besides the basic element definition, many elements also allow you to define attributes to apply to the element.
Attributes provide further instructions to the browser on how to handle the  content contained within the element.
When you define an attribute for an element, you must also assign it a value.
You include attribute and their values indie the opening tag of the elemetn, liek this:
<element attribute="value"> content </element>

You can define more than one attribute1="value1" attribute2="valuew2">

Attributes are commonly used to apply inline styles to elements:

<h1 style="color: red">Warning!!</h1>

The style attribute shown here defines additional styles the browser should apply to the content inside the element.
In this example, the browser will change the font color of the text to re>Warning!!</h1>

The style attribute shown here defines additional styles the browser should apply to the content inside the element.
In this example, the browser will change the font color of the text to red

Document type
Every web page must follow an HTML or XHTML document standard so the browser can parse it correctly.
THe very first element in the web page code is the markup language standard your document follows.
This element, called the document type, is crucial, because the browser has to know what standard to follow when parsing the code in your web page.

You define the document type using the <!DOCTYPE> tag.
It contains one or more attributes that define the markup language standard.
Prior version of HTML used a very complicated format for the document type definition, pointing the browser to a web page on the Internet that contained the standard definition.

Fortunately, the HTML5 standard reduced that complexity.
To define an HTML5 document, you just need to include the following line:

<!DOCTYPE html>

When the browser sees this line at the start of your web page code, it knows to parse the elements using the HTML5 standard.

Warning! Actung !~
If you omit the <!DOCTYPE> tag, the browser will still attempt to parse and process the markup code.
However, because the browser won't know exactly which standard to follow, it follows a practice known as quirks mode.
In quirks mode, the browser follows the original version of the HTML standard, so newer elemetns won't be rendered correclty.

Page definition
To create an HTML5 web page, you just define the different elements that appear on the page.
THe elements fit together as part of a hierarchy of elements.
Some elements define the different sections of the web page, and other elements contained within those sections define content.

The html element is at the top of the hierarchy.
It defines the start of the entire web page.
All the other elements contained within the web page should appear between the <html> opening and </html> closing tags:

<html>
<head>
Head content
</head>
<body>
Body content
</body>
</html>

The head element contains information about your web page for the browser.
Content contained within the ehad element doesn't appear on the web page, but it directs things behind the scenes, such as any files the browser sneeds to load in order to properly display the web page or any programs the browser needs to run when it loads the web page.
One element that's commonly found in the head element content is the title, which defines the title of your web page:

<head>
<title>My First Web Page/title>
</head>

The web page title isn't part of the actual web page, but it usually appears in the browser's title bar at the top of the browser window or in the window tab if the browser supports tabbed browsing.
The body element contains the elements that appear in the webb page.
This is where you define the content that you want your site visitors to see.
The body element should always appear after the best element in the page definition.
It's also important to close the body element before closing out the html element.
Follow these steps to create and test your first web page:

1. Open the editor, program editor, or integrated development environment (IDE) package of your choice.
see Book 1, chapter 3, for ideas on which tool to use.

2. Enter the follow code into the editor window:

<!DOCTYPE html>
<html>
<head>
<title> My first Web page </title>
</head>

<body>
This is text inside the web page.
</body>
</html>

3. Save the code to the DocumentRoot folder of your web server, naming it mystest.html.

If you're using the XAMPP server in Windows, the folder is c:\xampp\htdocs.
For macOS, it's /Application/xampp/htdocs.

4.Start the XAMPP servers.

5. Open the browser of your choice, and enter the following URL:

http://localhost:8080/mytest.html.

Note that you may need to change thte 8080 port bumber specified in the URL to match your XAMPP Apache server set up (see Book1, Chapter2).
Figure 1-1 shows the web page that this code produces.

The head element defines the web page title, which as shown in Figure 1-, appears in the web browser title bar.
The body element contains a single line of text, which the browser renders inside the browser windows area.

TIP:
You may notice that other than the special <!DOCTYPE> tag, all the other HTML tags I used are in lowercase.
HTML 5 ignores the case of element tags, so you can use uppercase, lowercase, or any combination of the two for the element names in the tags.
The older XHTML standard requires all lowercase tags, so many web developers have gotten into the habit of using lowercase for tags, and more often than not, you'll still see HTML5 code use all lowercase tag names.

Page sections
Web pages these days aren't just long pages of content.
They contain some type of formatting that lays out the content in different sections, similar to how a newspaper presents articles.
In a newspaper, usually there are two or more columns of content, with each column containing one or more seperate articles.

In the old days, trying to create this type of layout using HTML was somewhat of a challenge.
Fortunately, the HTML5 standard defines some basic elements that make it easier to break up our web pages into sections.
Table 1-1 lists the HTML5 elements that you use to define sections of your web page.

Table 1-1   HTML5 Section Elements

Element          Description
article          A subsection of text contained within a section
aside            Content related to the main article, but placed alongside to provide additional information
div              A grouping of similarly styled content within an article.
footer           Content that appears at the bottom of the web page.
header           Content that appears at the top of the web page.
nav              A navigation area allowing site visitors to easily find other pages or related websites.
section          A top-level grouping of articles.

REMEMBER:
Although HTML5 defines the sections, it doesn't define how the browser should place them in the web page.
That part is left up to CSS styling, which I talk about in Chapter 2 of this minibook.

When you combine the HTML5 section elements with the appropriate CSS3 styling, you can create just about any look and feel for your web pages that you want.
Although there's no one standard, there are some basic rules that you can follow when positioning sections in the web page.
Figure 1-2 shows one common layout that I'm you've seen used in many websites.
-----------------------------------------------------------------------------------
|  Body                                                                           |
| |---------------------------------------------------------------------------|   |
| |          Header                                                           |   |
| |___________________________________________________________________________|   |
| ______  ___________________________________________________________   ________  |
| |nav |  | Section                                                 |   |aside |  |
| |    |  |                                                         |   |      |  |
| |    |  |  |--------------------------------------------------|   |   |      |  |
| |    |  |  | article                                          |   |   |      |  |
| |    |  |  |__________________________________________________|   |   |      |  |
| |    |  |                                                         |   |      |  |
| |    |  |  |--------------------------------------------------|   |   |      |  |
| |    |  |  | article                                          |   |   |      |  |
| |    |  |  |__________________________________________________|   |   |      |  |
| |____|  |_________________________________________________________|   |______|  |
|                                                                                 |
|         |---------------------------------------------------------|             |
|         | Footer                                                  |             |
|         |_________________________________________________________|             |
|---------------------------------------------------------------------------------|

Just about every web page has a heading section at the top of the page that identifies it to site visitors.
After that, a middle section is divided into three separate areas.
On the left side is often a navigation section, providing links to other pages in the website.
On the right side is often additional information or, in some cases, advertisements.
In the middle of the middle section is the meat of the content you're presenting to your site visitors.
Finally, at the bottom of the web page is a footer, often identifying the copyright information, as well as some basic contact information for the company.

The div elemetn is a holdout from previous versions of HTML.
If you need to work with older versions of HTML, instead of using the named section elements, you need to use the <div> tag, along with the id attribute to define a specific name for the section:

<div id="header">
content for heading
</div>

The CSS styles refer to the id attribute value to define the styles and positioning required for the section.
You can still use this method in HTML5.
Designers often use the div element to define subsectinos within articles that need special styling.


<!-- Technical Stuff  -->
A WORD ABOUT WHITE SPACE
Quite possibly the most confusing feature in HTML is how it uses white space.
The term white space refers to spaces, tabs, consecutive spaces, and line breaks within the HTML code.

By default, when a browser parses the HTML code, it ignores any white space between elements.
So, these three formats all produce the same resutls:

<title>
My First Web Page
</title>

<title> My First Web Page
</title>

<title>My First Web Page</title>

It's completely up to you which format to use for your programs, but I recommend choosing a format and sticking to it.
That'll make reading your code down the road easier, for you or anyone else.


COMMENTING YOUR CODE
Every programming language allows you to embed comments inside the code to help with documenting what's going on.
HTML is no different.
HTML allows you to insert text inside the HTML document that will be ignored by the browser as it parses the text.

To start a comment section in HTML, you use the following symbol:

<!--

You can then enter a little or as much text as you neeed to properly document what's going on in your code.
When the comment text is complete, you have to close the comment section using the following symbol:

-->

You can place anything between the opening and closing comment tags, including HTML code, and the browser will ignore it.
However, be careful what you say in your comments, because they can be read by anyone who downloads your web page!

Now that you knokw how to define different sections of the web page, the next section discusses how to add content to them.





Looking at the basic HTML5 Elements
After you define one or more sections in your web paeg, you're ready to start defining content. Adding content to a web page is sort of like working on a car assembly line.
You define each piece of the web page separately, element by element.
It's up to the browser to assemble the piece to create the finished web page.

This section covers the main elements that you'll use to define content in your web page.

Headings
Normally, each new section of content in a web page will use some type of heading to make it stand out.
Research shows that the first thing site visitors usually do when visiting a web page is to scan the main headings on the page.
If you can't attract their attention with your section headings, you may quickly lose them.

HTML5 uses the h element to define text for a heading.
It defines six different levels of headings.
Each heading level has a separate tag:

<h1>A level 1 heading </h1>
<h2> A level 2 heading </h2>
<h3> A level 3 heading </h3>
<h4> A level 4 heading </h4>
<h5> A level 5 heading </h5>
<h6> A level 6 heading </h6>

Although there are six levels of headings in the HTML5 standard, most sites don't use more than two or three.

The client browser determines the font, style, and size of the text it uses for eack heading level.
Figure 1-3 shows how the Chrome web browser interprets the six levels of headings.

The browser displays eack heading level with a decreasing font size.
By the time you get to the sixth heading level, it's pretty hard to tell the difference between the heading and normal text on the web page!

Text groupings
There are several HTML5 elements that allow you to group text together into what are called block-level elements.
The browser treats all of the content defined within the opening and closing tags of a block-level element as a single group.
This allows you to use CSS to style or position the entire block of content as one piece, instead of having to style or position each element individually.

You can group headings together using a new feature in the HTML5 standard called a heading group, using the hgroup element:

<hgroup>
<h1>This is the main heading</h1>
<h2>This is the subheading. </h2>
</hgroup>

The heading group doesn't change the h1 or h2 elements, but it provides a way for the browser to interpret the two headings as a single element for styling and positioning.
This allows you to use CSS styles to format them as a single block so they blend together like a main heading and a subheading.

A web page consiting of sentences just strung together is boring to read and won't attract very many site visitors (or may just put them to sleep).
In print, we group sentences of common thoughts together into paragraphs.
You do the same thing in your web page content by using the p element:

<p> This is one paragraph of text. The paragraph contains two sentences of content. </p>

Notice that the p element uses an opening tag (<p>) and a closing tag (</p>) to mark the beginning and end of the grouped text.
The browser treats all the text inside the p elemetn as a single element.
When you group the content together, you can apply styles and positioning to the entire block.

Be careful with the p element, though.
The rules of white space that apply to HTML tags also apply to text inside the p element.
The browser won't honor line breaks, tabs, or multiple spaces.
So, if you have code like this:

<p>
This is one        line.
This is    another line.
</p>

It will appear in the web page like this:

This is one line. This is another line.

All the extra spaces and the line break are removed from the content.
Also, notice that the web browser adds a space between the two sentences.

If you want to preserve the formatting of the text in the web page, use the pre element.
The pre element allows you to group preformatted text.
The idea behind performatted text is that it appears in the web page exactly as you enter it in the code file:

<pre>
This is one     line.
This is another line.
</pre>

The browser will display the text in the web page exactly as it appears in the HTML5 code.

Yet another method of grouping text is the blockquote element.
The blockquote element is often used to quote references within a paragraph.
The browser will indent the text contained within the blockquote separate from the normal paragraph text:

<p>The only poem that I learned as a child was: </p>
<blockquote>Roses are red, violets are blue. A face like yours, belongs in the zoo.</blockquote>
<p>But that's probably not considered classic poetry. </p>

This features helps you embed any type of text within content, not just quotes.

Breaks
Because HTML doesn't recognize the newline character in text, there's a way to tel the browser to start a new line in the web page when you need it.
The single-sided br element forces a new line in the output:

<p>
This is one line.
<br>
This is a second line.
</p>

Now the output in the web page will appear as:

This is one line.
This is a second line.

Another handy break element is the hr element.
It displys a horizontal line across the width of the web page section.

<h1>Section 1. </h1>
<p>This is the content of section 1. </p>
<hr>
<h1>Section 2</h2>
<p>This is the content of section 2. </p>

The horizontal line spans the entire width of the web page block that contains it, as shown in Figure 1-4.

Sometimes that's a bit awkward, but you can control the width of the horizontal line a bit by enclosing it in a section and adding some CSS styling.




Making Your Text

The opposite of block-level elements are text-level elements. Text-level elements allow you to apply styles to a section of content within a block.
This section shows you the text-level elements you can apply to the content in your web page.

Formatting text
The text-level elements apply predefined formats to text without the need for CSS styling.
The most popular of the text-level elemetns are the b and i elements, which apply the bold and italic styles, respectively:


<p> I <i> wanted </i> the <b> large</b> drink size. </p>

Text-level elements are also called inlinne, because they appear in the same line as the content.
You can embed text-level elemetns to apply more than one to the same text:

Remember!:
When applying two or more text-level elements to text, make sure you close the tags in the opposite order that you open them.

HTML5 supports lots of different text-level elements for using different styles of text directly, without the help of CSS.
Table 1-2 lists the text-level elements available in HTML5.


Table 1-2                       HTML5 Text-Level Elements
Element                  Description
abbr                     Displays the text as an abbreviation
b                        Displays the text as boldface
cite                     Displays the text as a citation (often displayed as italic)
code                     Display the text as program code (often displayed with a fixed-width font)
del                      Display the text as deleted (often displayed with a strikethrough font)
dfn                      Display the text as a defination term (often displayed as italic)
em                       Displays the text as emphasized (often displayed as italic)
i                        Displays the text as italic
ins                      Displays the text as inserted (often displayed with an underline font)
kbd                      Displays the text as typed from a keyboard (often as fixed-width font)
mark                     Displays the text as marked (often using highlighting)
q                        Displays the text as quotes (often using quotes)
samp                     Displays the text as sample program code (often displayed with a fixed font)
small                    Displays the text using a smaller font than normal
strong                   Displays the text as strongly emphasized (often using boldface)
sub                      Displays the text as subscripted
sup                      Displays the text as superscripted
time                     Displays the text as a date and time value
var                      Displays the text as a program variable(often using italic)

As you can see in Table 1-2, you have lots of options for formatting text without eeven having to write a single line of CSS code!

Using hypertext

In Book1, Chapter 1, I mention that hyperlinks are the key to web pages.
Hyperlinks are what tie all the individual web pages in your website together, allowing site visitors to jump from one page to another.

The element that creates a hyperlink is the anchor text-level element.
At first, that may sound somewhat counterintuitive - you'd think an anchor would keep you in one place instead of sending you someplace else.
But hink of it the other way around:
The anchor elemetn is that anchors another web page to your curren tweb page.
Following the anchor takes you to the other web page!

Formatting a hyperlink
Because the anchor elemetn is a text-level element, you use it to makr text inside a block.
That text then becomes the hyperlink.
You add an anchor element using the <a> tag.
The anchor element is two-sided, so it has both an opening tag (<a>) and a closing tag (</a>).
The text inside the opening and closing tags becomes the hyperlink text.

A few different attributes are available for the <a> tag, but the most important one is the href attribute.
The href attribute specifies where the hyperlink takes your cite visitors:

<a href="https://google.com"> Click here to search. </a>

When a site visitor clicks the hyperlink, the browser automatically takes the visitor to the referenced web page in the same browser window.
If you prefer, you can also specify the target attribute, which specifies how the browser should open the new web page.
Here are your options for the target attribute:

>> _blank: Opens the specified page in a new tab or window.
>> _self: Opens the specified page in the current tab or window.
This is the default behavior in HTML5, so it's not necessary to add it unless you want to for clarification in your code.
>> _parent: Opens the specified page in the parent window of a frame embedded within the window.
Embedded frames aren't popular anymore in HTML5, so this optino is seldom used.
> _top: Opens the specified page in the main window that contains the frame embedded within other frames.
This is seldom used.

<a href="http://www.google.com" target="_blank"> Click here to search. </a>

TIP:
There's no set rule regarding how to handle opening new web pages, but generally it's a good idea to open other pages on your own website in the sme browser tab or window, but open remote web page in a new tab or window.
That way your site visitors can easily get back to where they left off on your website if needed.

Displaying a hyperlink
When you specify a hyperlink in the text, the browser tries to make it stand out from the rest of the text, as showm in Figure 1-5.

By default, browsers will display the anchor element text using a different format than the rest of the block text:

>> Unvisited links appear underlined in blue.
>>Visited link appear underlined in purple.
>> Active links are when you click an unvisited or visited link your mouse.
When you click your mouse, the link becomes active and appears underlined in red.

You can change these formats to your own liking using CSS styles, as explain in the next chapter.

Displaying a hyperlink
When you specify a hyperlink in the text, the browser tries tries to make it stand out from the rest of the text, as shown in Figure 1-5.

By default, browsers will display the anchor element text using a different format than the rest of the block text:
>> Unvisited links appear underlined in blue.
>> Visited links appear underlined in purple.
>> Active links are when you click an unvisited or visited link with your mouse.
When you click you mouse, the link becomes active and appears underlined in red.

You can change these formats to your own liking using CSS styles, as I explain in the next chapter.

Specifying a hyperlink
The href attribute defines the location of the web page that you want the browser to open for your site visitor, but there are a few different formats you can use to specify that location:
>> A different location on the same document
>> A separate web page in the same website
>> A web page in a remote website.

You can use hyperlinks to force the browser to jump to a specific location inside the same web page.
This is handy for long web pages that require lots of scrolling to get to sections at the bottom of the page.
To use this method, you must first identify the locations in the web page by applying the id attribute to a block-level element, such as a heading or a paragraph element:

<h1 id="chicago">Chicago News</h1>

To create an anchor element to jump to that section, you use the id attribute value preceded by a number sign or hash mark (#):
<a href="#chicago">See Chicago News</a>

When the site visitor clicks the links, the browser automatically scrolls to place the section in the viewing area of the window.

When jumping to another web page on the same server, you don't need to include the full http:// address in the href attribute.
Instead, you can specify a relative address.
The relative address isn't where your uncle lives; it's shorthand for findnig another file on the same web server.
If the file is in the same folder on the same server, you can just specify the filename:

<a href="store.html">Shop in our online store. </a>

You can also place files in a subfolder under the location of the current web page.
To do that, specify the subfolder without a leading slash:

<a href="store/index.php">Shop in our online store. </a>

In both cases, the browser will send an HTTP request to retrieve the file to the same server where it downloads the original page from.

To specify a web page on a remote websire, you'll need to use an absolute address.
The absolute address specifies the location using the Uniform Resource Locator (URL), whic defines the exact location of a file on the Internet using the following format:

protocol://host/filename

The protocol part specifies the network protocol the browser should use to download the file.
For web pages, the protocol is either http (for unencrypted connections) or https (for encryopted connections).
The host part specifies the host name, such as www.google.com for Google.
The filename part specifies the exact folder path and filename to reach the file on the server.
If you omit the filename, the remote web server will offer the default web page in the folder (usually, index.html).

TIP:
You can also local filenames using an absolute path address.
Just precede the folder name with a forward slash(/).
The leading forward slash tells the server to look for the specified folder at the DocumentRoot location of the web server, instead of in a subfolder from the curren location.

Working with Characters
-----------------------

No, I'm not talking about Disneyland.
I'm talking about the letters, numbers, and symbols that appear on your web pages.
Humans prefer to see information as letters, words, and sentences, but computers prefer to work with numbers.
To compensate for that, programmers developed a way to represent all characters as number codes so computers can handle them.
The computer just needs a method of mapping the number fcodes to characters.

Character sets
The character-to-number mapping scheme is called a character set.
A character set assigns a unique number to every character the computer needs to represent.
In the early days of computing in the United States, the American Standard Code for Information Interchange (ASCII) became the standard character set for mapping the English-language characters and symbols in computers.

As the computing world became global, most programs needed to support more than just the English language. The Latin-1 and ISSO 8859 character sets became popular, because they include characters for European languges.
But that still didn't cover everything!

Because it's supported worldwide, the HTML5 standard required more than just European-language support.
The Unicode character set supports characters from all the language of the world; plus, it has room for expansion.
Because of its huge size, though, a subset of Unicode, called UTF-8, became more popular.
UTF08 also supports all languages, but with a smaller footprint; it has become the standard for HTML5.

Although the HTML5 standard specifies a default character set, it's a good idea to specify the character set in your web pages so that you're sure the client browser is using the same character set to interpret your content.
You do that using the meta element.
Because the meta element provides additional information about your web page, you have to place it inside th head element section of the HTML code.

Th meta element uses the single-sided <meta> tag.
To specify the character set in HTML5 you use the following format:
<meta charset="UTF-8">
If your HTML code requires a different character set, you specify it here.

TIP:
The <meta> tag allow you to specify other features of your web page to the browser so that it knows how to process the body of the web page, and identify the content of the web page to servers that automatically scan your weeb page for search engines.
I talk some more about the <meta> tag in Book 4, Chapter 4.


Special characters
The UTF-8 character set supports lots of fancy characters that you won't find on your keyboard, such as the copyright symbol (C), the cent symbol,(c), and the degree symbol. THese are commonly referred to a sepcial charcters.

You can use special characters in your web page content because they're valid UTF-8 characters.
You just need to use a different way of specifying them.
Instead of typing these characters using your keyboarrd, you use a code to specify them.

HTML5 uses two types of codes to specify special characters:

>> Numeric character reference:
The numeric character reference uses the UTF-8 numeric code assigned to the character.
Place an ampersand(&) and a hash (#) in front of the character number, and a semicolon(;) after the character number.
For example, to display the copyright symbol, use the following:

&#169;

>>Character entity reference: The character entity reference uses a short name to represent the character.
Place an ampersand(&) in front of the character short name, and a semicolon (;) after the character short name:
&copy;

Both methods works equally well, so use whichever method you're most comfortable with.
The list of special charcters available in UTF-8 is pretty long, so I won't include them here. If you search the webb for UTF-8 characters; you'll find plenty of websites that show the mappings between the UTF-8 numbers and character short names.


MAKING A LIST (AND CHECKING IT TWICE)
----------------------------------------

The world is full of lists - to-do lists, wish lists, grocery lists ... the list just goes on and on.
It's no surprise that the HTML5 developers created a way to easily present lists in web pages.
There are theree basic types of lists available for you to use in HTML5: unordered lists, ordered lists, and description lists.
This section covers how to use each type of list in your web pages.

Unordered lists
Some lists have no specific order to the items contained in them (like a grocery list).
In the word-processing world, these are called bulleted lists, as each item in the list is preceded by a generic bullet icon.
In HTML5, they're referred to as unordered lists.

The HTML5 standard uses the ul element to display an unordered list using bullets.
The ul element is a two-sided eelement, so you use the <ul> tag to open the list and the </ul> tag to close the list.

You must identify each item in the list using the li element.
The li element is also a two-sided element, so you use the <li> tag to open each item description and the </li> tag to close it.
The overall structure for an unordered list looks like this:

<ul>
<li>item1</li>
<li>item2</li>
<li>item3</li>
</ul>

Because HTML5 doesn't care about white space in code, it's common to indent the list items in the definition as shown here, to help make it easier to read the code.
However, indenting isn't necessary.

Figure 1-6 shows the default way most browsers display unordered list in the web page.

The bullet marks are fairly generic, similar to what you'd see in most word-processing documents.
Fortunately, you can spice things up a little using CSS by defining different types of bullets to use.

Ordered lists
Some lists have a specific order in which the items should appear and be processed.
In word-processing, these lists are called numbered lists.
In HTML5, they 're calle d ordered lists.

The HTML5 standard uses the ol element to display an ordered lists.
The ordered list also uses the li element to mark the individual items contained in the lists:

<ol>
<li>Walk the dog. </li>
<li>Eat breakfast. </li>
<li>REad the paper.</li>
<li>Get ready for work.</li>
</ol>

By default, browsers assign each item in the list a number starting at 1, and increasing for each list item, as shown in Figure 1-7.

Figure 1-7
olist.html

If you want the list to be in reverse order, add the reversed attribute:
<ol reversed>

If you'd like to start at a different number add the start attribute, and specify the starting number as the value:

<ol start="10">

If you don't want to use numbers, there are a few other options available with the type attribute.
Table 1-3 shows the different ordered list types available.

Ordered List Types
Type         Description
1            Numerical list (the default)
A            Alphabetical list, using uppercase
a            Alphabetical list, using lowercase
I            Roman numerals, using uppercase
i            Roman numerals, using lowercase


As you can probably guess, you can also embed lists witin lists:

<ol type="I">
<li> First item</li>
<ol type="A">
<li>Item1, Subitem 1 </li>
<li>Item1, Subitem2 </li>
</ol>

<li>Second item </li>
<ol type="A">
    <li>Item2, Subitem1</li>
    <li>Item2, Subitem2</li>
</ol>

!Warning!
When using embedded lists, it's very important to match up the opening and closing tags for each item in the list, as well as the lists themselves. Any mismatches will confuse the browser and will cause unpredictable result.

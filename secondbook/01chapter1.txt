In this Chapter
>> Looking at the HTML5 document structure
>> Identifying the basic HTML5 elements
>> Formatting text
>> Using special characters
>> Creating lists
>> Working with tables.

Chapter 1
---------
The Basics of HTML5


The core of your web application is the HTML5 code you create to present the content to your site visitors.
You need an understanding of how HTML5 works and how to use it to be best present your information.
This chapter describes the basics of HTML5 and demonstrates how to use it to create web pages.

Diving into Document Structure

The HTML5 standard defines a specific structure that you must follow when defining your web pages so that they appear the same way in all browsers.
This structure includes not only the markups that you use to tell browsers how to display your web page content, but also some overhead information you need to provide to the browser.
This section explains the overall structure of an HTML5 program, and tells you what you need to include to ensure your clients' browsers know how to work with your web pages correctly.

Elements, tags, and attributes
An HTML5 document consists of one or more elements.
An element is any object contained within your web page.
That can be headings, paragraphs of text, form fields, or even multimedia clips.
Your browser works with each element individually, positioning it in the browser window and styling it as directed.

You define elements in your web page by using tags.
A tag identifies the type of element so the browser knows just how to handle the content it contains.
The HTML5 specification defines two types of elements:

>>Two-sided elements: Two-sided elements are the more common type of element.
A two-sided element contains two parts: an opening tag and a closing tag.
The syntax for a two-sided element looks like this:
<element>content</content>

The first element tag is opening tag.
It contains the element name, surrounded by the less-than symbol (<) and greater-than symbol (>), and defines the start of the element defintion.

The second tag is the closing tag; it defines the end of the element definition.
It points to the same element name, but the name is preceded by a forward slash(/).
The browser should handle any content between the two tags as part of the element content.
For example, the HTML5 h1 element defines a heading like this:
<h1> This is a heading</h1>
The element instructs the browser to display the text This is a heading using the font and size appropriate for a heding on the web page.
It's up to the browser to determine just how to do that.

>>One-side elements: One-sided elements don't contain any content and usually define some type of directive for the browser to take in the web page.
For example, the line break element instructs the browser to start a new line in the web page:
<br>

TIP:
Because there's no content, there's no need for a closing tag.
The older XHTML standard requires that one-sided tags included a closing forward slash character at the end of the tag, such as <br/>.
This isn't required by HTML5, but it's supported for backward compatibility.
It's very common to still see that format used in HTML5 code.

Besides the basic element definition, many elements also allow you to define attributes to apply to the element.
Attributes provide further instructions to the browser on how to handle the  content contained within the element.
When you define an attribute for an element, you must also assign it a value.
You include attribute and their values indie the opening tag of the elemetn, liek this:
<element attribute="value"> content </element>

You can define more than one attribute1="value1" attribute2="valuew2">

Attributes are commonly used to apply inline styles to elements:

<h1 style="color: red">Warning!!</h1>

The style attribute shown here defines additional styles the browser should apply to the content inside the element.
In this example, the browser will change the font color of the text to re>Warning!!</h1>

The style attribute shown here defines additional styles the browser should apply to the content inside the element.
In this example, the browser will change the font color of the text to red

Document type
Every web page must follow an HTML or XHTML document standard so the browser can parse it correctly.
THe very first element in the web page code is the markup language standard your document follows.
This element, called the document type, is crucial, because the browser has to know what standard to follow when parsing the code in your web page.

You define the document type using the <!DOCTYPE> tag.
It contains one or more attributes that define the markup language standard.
Prior version of HTML used a very complicated format for the document type definition, pointing the browser to a web page on the Internet that contained the standard definition.

Fortunately, the HTML5 standard reduced that complexity.
To define an HTML5 document, you just need to include the following line:

<!DOCTYPE html>

When the browser sees this line at the start of your web page code, it knows to parse the elements using the HTML5 standard.

Warning! Actung !~
If you omit the <!DOCTYPE> tag, the browser will still attempt to parse and process the markup code.
However, because the browser won't know exactly which standard to follow, it follows a practice known as quirks mode.
In quirks mode, the browser follows the original version of the HTML standard, so newer elemetns won't be rendered correclty.

Page definition
To create an HTML5 web page, you just define the different elements that appear on the page.
THe elements fit together as part of a hierarchy of elements.
Some elements define the different sections of the web page, and other elements contained within those sections define content.

The html element is at the top of the hierarchy.
It defines the start of the entire web page.
All the other elements contained within the web page should appear between the <html> opening and </html> closing tags:

<html>
<head>
Head content
</head>
<body>
Body content
</body>
</html>

The head element contains information about your web page for the browser.
Content contained within the ehad element doesn't appear on the web page, but it directs things behind the scenes, such as any files the browser sneeds to load in order to properly display the web page or any programs the browser needs to run when it loads the web page.
One element that's commonly found in the head element content is the title, which defines the title of your web page:

<head>
<title>My First Web Page/title>
</head>

The web page title isn't part of the actual web page, but it usually appears in the browser's title bar at the top of the browser window or in the window tab if the browser supports tabbed browsing.
The body element contains the elements that appear in the webb page.
This is where you define the content that you want your site visitors to see.
The body element should always appear after the best element in the page definition.
It's also important to close the body element before closing out the html element.
Follow these steps to create and test your first web page:

1. Open the editor, program editor, or integrated development environment (IDE) package of your choice.
see Book 1, chapter 3, for ideas on which tool to use.

2. Enter the follow code into the editor window:

<!DOCTYPE html>
<html>
<head>
<title> My first Web page </title>
</head>

<body>
This is text inside the web page.
</body>
</html>

3. Save the code to the DocumentRoot folder of your web server, naming it mystest.html.

If you're using the XAMPP server in Windows, the folder is c:\xampp\htdocs.
For macOS, it's /Application/xampp/htdocs.

4.Start the XAMPP servers.

5. Open the browser of your choice, and enter the following URL:

http://localhost:8080/mytest.html.

Note that you may need to change thte 8080 port bumber specified in the URL to match your XAMPP Apache server set up (see Book1, Chapter2).
Figure 1-1 shows the web page that this code produces.

The head element defines the web page title, which as shown in Figure 1-, appears in the web browser title bar.
The body element contains a single line of text, which the browser renders inside the browser windows area.

TIP:
You may notice that other than the special <!DOCTYPE> tag, all the other HTML tags I used are in lowercase.
HTML 5 ignores the case of element tags, so you can use uppercase, lowercase, or any combination of the two for the element names in the tags.
The older XHTML standard requires all lowercase tags, so many web developers have gotten into the habit of using lowercase for tags, and more often than not, you'll still see HTML5 code use all lowercase tag names.

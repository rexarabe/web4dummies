In this chapter 
>> Rounding corner 
>> Working with border images 
>> Exploring new colors 
>> Using gradients 
>> Lurking in the shadows 
>> Working with fonts 
>> Answering media queries 

Chapter 4

Advanced CSS3
The previous two chapters show you how to use the combination of HTML5 and CSS to create content and style it for your web pages.
CSS3 provides some more advanced features, allowing you to do even more styling for your web pages. 
This chapter walks you through some of the more exciting features from CSS3 that you can use to liven up your site. 

Rounding your Corners 
In Book 2, Chapter 3, I explain how to build online forms using HTML5.
However, by default, HTML forms are somewhat boring, even after adding some CSS styling. 

The default styling used by browsers to display text boxes, buttons, and text areas in forms produces nothing but square boxes, which gets pretty boring. 
The original CSS standard didn't do anything to solve the problem, other than possibly adding some color to the square boxes. 
Cubism may be good for some styles of paintings, but that layout doesn't work in forms and can bore your website visitors. 

One of the features that had been hotly sought after in the browser world has been the ability to use rounded corners for form elements. 
The simple act of rounding the square boxes just a bit can liven up the form. 
Many individual browsers added the rounded corners feature on their own, separate from the CSS standard. 
Unfortunately, as you may guess, different browsers used different methods for implemneting rounded corners. 
Trying to write a style that would work across all browsers became both difficult and confusing.
But because using rounded corners became so popular, that feature was finally added to CSS3 as a standard.

The new border-radius style property allows you to round off the sharp edges from elements on the web page. 
It does that by allowing you to define the radius of an imaginary circle used to create the rounded corners. 
You can just shave a little off the edge by using a small radius value, or you can create a full ellipse by completely rounding all four corners with a large radius value. 
Figure 4-1 shows an example of applying the border-radius property to a few form elements.

Notice that the input text boxes, the text area, and even the Submit buttons are rounded instaed of the standard squares.
That makes quite a difference in the appearance of the web form. 

What can get confusing with the border-radius property, though, is that there are four different formats for using it - with one, two, three, or four parameters.
The following single parameter sets the radius of all four corners to 10 pixels:

border-radius: 10px;

The following two parameters set the radius of the top-left and button-right corners to 10 pixels, but the top-right and bottom-left corners to 5 pixels:

border-radius: 10px 5px;

The following three parameters set the radius of the top-left corner to 10 pixels, the top-right and bottom-left corners to 5 pixels, and the bottom-right corner to 3 pixels: 

border-radius: 10px 5px 3px;

The following four parameters set the radius of the top-left corner to 10 pixels, the top-right corner to 5 pixels, the bottom-right corner to 3 pixels, and the bottom-left corner to 1 pixel:

border-radius: 10px 5px 3px 1px;

When you're able to set the radius of each individual corner or pairs of corners, you can create quite a few different special effects, such as dialog bubbles or ellipses. 

You can also set the individual corner radius values independently from one another with a few additional properties: 

>> border-top-left-radius 
>> border-top-right-radius
>> border-bottom-left-radius
>> border-bottom-right-radius

Each one sets the corresponding border radius value in the element.

The border-radius properties all use a size value to set the circle radius for the corner. 
You can specify the size using any of the standard CSS size unit measurements, such as inches, pixels, or em units. 


Using Border Images
The default border line that HTML5 places around objects is pretty dull. How about adding some more elaborate borders around objects?
You can, thanks to another interesting feature added to CSS3.
Its provides the ability to use images for the border around elements instead of just a line. 
This feature allows you to use any type of image to create a flourish around your elements.

You apply a border image to an element by adding the border-image property:

border-image: url(file) slice repeat

The url() function defines the location of the image file used for the border. 
The path can be either an absolute value pointing directly to the image file or a relative path (relative to the location of the CSS script).

The slice value defines what parts of the border image to use fort the border.
This part can get somewhat complicated. 
By default, the browser slices the border image into nine sections, as shown in Figure 4-2.
The mine border image sections are 

(See figure 4-2 on page 160)

>> The four corner pieces (top left, top right, bottom right, and bottom left)
>> The four edge pieces (top, right bottom, and left) 
>> The middle section 

For the slice value, you specify the size of the image pieces to use for the individual border images. 
You can specify that as either a percentage of the engire image size, or a pixel value to repressent how much of the image edges to use for the border edges. 
you have the optino to specify the slice as one, two, or four separate values:

>> One value: Cuts the same size of the image for the four corners and the four edges 
>> Two values: One size for the top and bottom, and another size for the left and right sides 
>> Four values: One size each for the top, right side, bottom, and left side. 

The repeat parameter defines how the browser should make the image fit the space required to create the border edges. 
There are four ways to do that:

>> repeat: Repeats the image to fill the entire edge
>> round: Repeats the image, but if the image doesn't fit the area as a whole number of repeats, rescales the image so it fits space required to create the border edges. 
There are four ways to do that: 

>> repeat: Repeats the image to fill the entire edge
>> round: Repeats the image, but if the image doesn't fit the area as a whole number of repeats, rescales the image so it fits
>> space: Repeats the image, but if the image doesn't fit the area as a whole number of repeats, adds spaces between the images so it fits. 
>> stretch: Stretches the image to fill the edge.

So, for example, to define a border image that uses 10-pixel slices from all the sides, and stretches them to fit the border area, you'd use the following:

border-image: url("myimage.jpg") 10 stretch;

Note that you don't use the units for the slice value. 
If you specify the values as a percentage of the entire image, add the percent sign, but if it's in pixels, leave off the px. 

Instead of using one property statement for all the features, if you prefer, you can define these values in seperate properties. 
There are five separate properties used to define the border image, and how the browser should use it (see Table 4-1).


Table 4-1             The CSS4 Border Image Properties

Property              Description
border-image-outset   Specifies the amount the image extends beyond the normal border box area 
border-image-repeat   Specifies how the imaege should be extended to fit the entire border area 
border-image-slice    Specifies what piece of the image to use as the border 
border-image-source   Specifies the path to the image used for the border 
border-image-width    Specifies the widths of the border image sides. 

Figure 4-3 shows what the border image looks like around an element. 
That's quite a bit better than the standard border line. 

Tip
The Mozilla Foundation developer's website includes a handy border image generator tool: 
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Background_and_Borders/Border-image_generator.
With this tool, you can upload an image or use one of their standard images, and the tool will atuomatically generate the CSS3 code necessary to extract the border image properties. 

Looking at the CSS3 Colors
In Book2, chapter 2, I show you the three formats that the original CSS standard defines for setting colors in the web page: 

>> Using a color name 
>> Using an RGB hexadecimal value
>> Using the rgb() function with decimal values 

The CSS3 standard extends the options you have available for  defining colors by adding the hue, saturation, and lightness (HSL) Method. 
The HSL method of defining colors uses three values:

>> Hue: The degree of color on the color wheel. 
The color wheel concept has been around in the art world since the early 1800s. 
It places the colors around a circle with the primary colors -red, yellow and blue - positioned on the wheel at 0, 60, and 240 degrees, respectively. 
The secondary colors - orange, green, and violet - are placed in between the primary colors, in locations based on their shades at 30 120, and 260 degrees, respectively.
From there, the different shades of color combinations are arranged appropiately on the wheel. 
To specify an individual color hue, you must know its location on the color wheel. 
Fortunately there are plenty of charts online to help out with that . 

>> Saturation: The percentage of the color used. 
The saturation value is a percentage that specifies the grayness shade of the color, from 0 percent for no color (all gray) to 100 percent for full color saturation.  

>> Lightness: The percentage of lightness added to the color. 
The lightness value is a percentage that specifies how dark (0 percent) or light (100 percent) the color should be. 
The 50 percentages create darker shades of the color, while smaller percentages create lighter shades of the color.

To use the HSL method to specify a color, use the hsl() format. 
For example, the following property specifies the red color at position 0 of the color wheel, shown at 100 percent saturation, with 50 percent lightness: 

color: hsl(0, 100%, 50%);

The CSS3 standard also adds the opacity feature to HSL, creating the HSLA color method.
With HSLA, you add fourth parameter to specify the opaqueness of the color, from 0 to 1.
The following example uses the red color, but at 50 percent transparency: 

color: hsla(0, 100%, 50%, 0.5)

TIP 
The beauty of using the HSL values comes when you're choosing a color scheme for your website. 
If you want to use a single color for the website scheme, you can modify the saturation and lightness levels to make different shades of the color. 
If you want to create a two-color scheme, you may want to choose hues that are 180 degrees apart - those are considered complementray. 
For a three-color scheme, hues that are 120 degrees apart create a triad. 
In a four-color scheme, select hues that are 90 degrees apart to create a nice offset. 
By stiking with the color wheel rules, just about anyone can create a tasteful color scheme for a website. 

Playing with Color Gradients 
While using individual colors are a great way to liven up the webisite, even colors can get somewhat boring when you use them all the time. 
To help make things more interesting, the CSS3 standard adds color gradients to the mix.
A color gradient slowly fades from one color into a second color, producing a warm transition effect. 
These transition colors are often used for backgrounds, creating an efefct that helps the website visitor follow the content as the color gradient morphs into a different color. 

There are two types of color gradients defined in the CSS3 standard: 

>> Linear gradients: Fade using a side-to-side or top-to-bottom direction
>> Radial gradients: Use a center point and face outward (radiate) from there, much like a tie-dyed T-shirt.

This section discusses how to use each of these methods in your web pages. 

Linear gradients 
A linear gradient fades between two colors in a linear manner - that is, from side to side, or from top to bottom. 
Use the linear-gradient() function to define the direction of the fade and the transition colors: 

linear-gradient(direction, color1, color2);

The direction parameter defines which way the gradient should go. 
If you omit the direction, the browser will create the gradient from top to bottom, a common effect for backgrounds. 
If you want to change the direction, specify it by the direction that the gradient should fade from color1 to color2, like this: 

linear-gradient(to right, black, white)

You can use to top, to bottom, or to right to specify the direction of the gradient. 
This example starts with the black color on the left side and fades to the white color on he right side, as shown in Figure 4-4.

To use the linear gradient, just add it anywhere you'd use a color value: 

background: linear-gradient(red, orange);

Figure 4-4:

Linear gradients can create quite the stunning effect for web page backgrounds.
If you want to get fancy, you can specify more colors in the linear-gradient() list as intermediate points between the two endpoints:

background: linear-gradient(red, orange, yellow);

This takes the color transition from a red to an orange first and then finally to the yellow destination. 

Radial gradient

The radial-gradient() does the same thing as the linear gradient, but in a circular pattern radiating from a central point. 
If you have fond memories of the days when tie-dyed T-shirts were popular, you may love the radial gradients!

Here's the format for the radial-gradient() function:

radial-gradient(shape size, color1, color2, ... )

The keys to creating the radial gradient are the shape parameter, which defines the shape of the gradient, and the size parameter. 
By default the radial gradient is drawn as an ellipse, but you can instead specify a circle.
The size determines where the radial gradient stops. Usually this is a location, such as closest-corner, closest-side, farthest-corner, or farthest-side.

You'll also want to define two or more colors to create the gradient effect in the image. 
The simplest way to define a radial gradient is to just define the colors: 

background: radial-gradient(red, orange, yellow);

This creates an elliptical radial gradient, centered in the element, radiating outward toward the farthest corner. 


Adding Shadows
Yet another cool feature added in CSS3 is the ability to create shadows of elements on the web page.
Shadows allow you to produce the effect of a light shining down on the web page. 
You can place shadows behind both text and box elements.

Text shadows 
Placing shadows behind text on a web page can create a startling effect odraw attention to headings. 
Figure 4-5 shows how the text shadow effect can make the heading stand out on the web page. 

Figure 4-5: Adding the text shadow effect to a heading element. 

The CSS3 text-shadow style property allows you to define just how the shadow should look. 
Here's the format of the text-shadow style property:

text-shadow: color offsetx offsety blur;

The color parameter defines the color to use for the shadow. 
The offsetx and offsety parameters define the distance of the shadow from the text. 
You can use either positive or negative values to represent the offset values. 
Positive values move the shadow down and to the right of the text.
Negative values move the shadow up and to the left of the text. 
The blur parameter defines the amount of space the shadow uses. 
The larger the space, the more stretched looking the shadow appears. 

h1 {
   text-shadow: black, 10px, 5px, 15px;
}

This produces a black shadow to the right and below the text. 

You can apply more than one shadow to a text element. 
Just list the different shadow definitions on the same text-shadow line, separated commas:

text-shadow: shadow1, shadow2, ...;


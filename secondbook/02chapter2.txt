IN THIS CHAPTER 
>> Defining styles 
>> Formatting text
>> Using the box model 
>> Sprucing up your tables
>> Positioning elements where you want them. 

Chapter 2 
The Basics of CSS3

In the last chapter, I explain how to use HTML5 to display content on your web page. 
However, when you juar uaw HTML5, things look pretty boring! 
This chpater shows you how to incorporate style into your web pages to help liven things up (even if you're not an artist)

First, I explain how to use CSS style sheets to style elements contained in the web page. 
Then I show you how to work with styles to change the color and font of text, make fancier lists, and spruce up your tables within your we page. 
Finally, I expalin how to work with the CSS positioning features to arrange your content in an appealing manner on the page. 

Understanding Styles 
When you specify an HTML5 element in your web page, the web browser decides just howt that element should look. 
Browsers use a default styling to determine the difference between the text in an h1 element and the tet in a blockquote element. 

Fortunately, another standard is available to work with HTML5 that helps you make your web pages uniques. 
Back in Book 1, Chapter 1, I explain how Cascading Style Sheets (CSS) work to style HTML5 content on the web page. 
That's the key to making your website stand out from the crowd!

The CSS standard specifies ways to define the color, size and font type of text that appears on web pages. 
It also provides some styles for adding background colors and images and styling other types of elements on the web page. 

TIP:
The CSS standard has evolved some over the years. 
At the time of this writing, it's currently at version 3 - you'll often see it referred to as CSS3, and that's what I call it in this book.

Now you're ready to take a deeper dive into just how to use CSS3 in your web applications. 
This section walks through how CSS3 works and how you can use it to make your web pages look good. 

Defining the rules of CSS3
CSS3 uses rules to define how the browser should display content on the web page. 
Each rule consists of two parts:
a selector that defines what elements the rule applies to and one or more declarations that define the style to apply. 

The format of the CSS3 rule looks like this:
selector { declaration1; declaration2; declaration3; ... }

In the rule defination, there are five ways to define the selector: 

>> Element type: The rule applies to all elements of the specified type. 
>> id attribute: The rule applies to the specific element with the specified id value. 
>> Pseudo-element: The rule applies to a specific part within an element. 
>> Pseudo-class: The rule applies to elements in a specific state. 

Each declaration defines a CSS3 style property and its associated value. 
Each property sets a specific style (such as a color or a font) to the element the rule applies to.
You must end each declaration with semicolon, and you can list as many declarations as needed in the rule. 

Here's the format of the property and it's value as you list them in the declaration:

property: value

In the following sections, I explain in more detail the five ways to define a selector.

Element type 
You can apply the same styling to all elements of a specific type in your web page by specifying the element name as the selector: 

h1 { color: red; }

This rule ensures that the browser displays all h1 elements in the web page using a red font color. 

id attribute:

If you need to define a rule that applies to just a single element in the web page, use the id attribute as the selector. 
To specify an id attribue as the selector, place a pound sign(# ) in front of the id name:

#warning {color: red; }

To use the rule in your HTML5 code, just apply the id attribute value to the element you need to style: 
<h1 id="warning">This is a bad selection.</h1>

The browser will apply that rule to the specific element that uses the id attributes value. 

The browser will apply that rule to the specific element that uses the id attribute value. 


Class attribute 
If you need to define a rule that that applies to multiple elements, but not necessarily all the elements of that type, use the class attribute as the selector. 
To specify a class attribute as the selector, place a period in front of the class name: 

.warning {color: red; }

Then just apply that class attribute to whichever elements you need to style using that rule: 
<h1 class="warning">This is a bad selection. </h1>
<p class="warning">Please make another selection. </p>

As you can see from this example, you can apply the same class attribute value to different element types, making this a very versatile way of styling sections of your web page!

If you decide you only need to apply a rule to one aprticular element type of the class you can specify the element type in the selector before the clss value: 

p.warning{color: red;}

This rule apply only to p elements with the class attribute value of warning. 

Pseudo-element 

The CSS standard defines a handful of special cases where you can apply styles to a subsection of the element content, and not the entire content of an element. 
These rules are called pseudo-elements. 

To use a pseudo-element rule, separate the rule from the selector it applies to using a double colon (::):

selector::pseudo-element

CSS3 supports a set of keywords for the pseudo-element names. 
For example, if you want to get fancy and style the first letter of a paragraph of text differently from the rest of the tex,t you can use the first-letter pseudo-element keyword:

p::first-letter {font-size: 20px}

The fist-letter matches with only the first letter of the p element, as shown in Figure 2-1.

CSS3 defines only a handful of pseudo-elements available, but these few pseudo-elements can come in handy for trying special formatting of your web pages. 

There aren't a lot of pseudo-elements available, but these few pseudo-elements can come in handy for trying special formatting of your web pages. 

CSS3 Pseudo-Elements 
Pseudo-Elements         Description
after                   Places an object before the selected element content. 
before                  Places an object after the selected element content. 
first-letter            Applies the rule to the first letter of the selected element content. 
first-line              Applies the rule to the first line of the selected element content.
selection               Applies the rule to the content area selected by the site visitor.


TIP:
The after and before pseudo-elements may sound a bit strange, because there's no content to style before or after an element. 
They're most commonly used for placing images after or before the content in the element. 

Pseudo-class
A pseudo-class applies the defined styles to an element that is in a specific state on the web page. 
The state refers to how the element behaves, such as buttons that are disabled, check boxes that are checked, or input boxes that have the browser focus.

These rules are commonly applied to hypertext links on the web page to help site visitors distinguish links they've already visited.
You do that by using a seires of four pseudo-class style rules:

>> link: Applies the rule to a normal, unvisited link
>> visited: Applies the rule to a link that the site visitor has already visited.
>> hover: Applies the rule when the site visitor hovers the mouse pointer over the link.
>> active: Applies the rue when the site visitor clicks the mouse on the link.

You specify pseudo-class rules using a single colon to separate it from the selector in the rule definition:
a: link {color: orange;}
a: visited {color: purple;}
a: hover {color: green;}
a: active {color: red;}

All these pseudo-class rules apply to all the anchor elements in the web page and apply different colors to the hyperlink text depending on the hyperlink state.

Warning!
It's extremely important to list the anchor element pseudo-class rules in the order shown here, or they won't work!

TIP:
If you want to remove the underline that most browsers apply to hypertext links, add the following property to the pseudo-element style rule:

text-decoration:none;

There are lots of pseudo-classes that you can use to apply rules to specific elements in the your web page. 
Table 2-2 shows the list of avaolable pseudo-classes in CSS3. 

Many of the pseudo-class style rules (suh as first-child and last-child) work with the location of and element within the Document Object Model (DOM).
Book 3, Chapter 2, discusses the DOM and how to use it to reference elements on the web page. 

THE CSS3 Pseudo-Classes
Pseudo-Class            Description
active                  The rule applies to hypetext links while the site visitor cliks them. 
checked                 The rule applies t input check boxes and radio options that are selected (checked).
disabled                The rule applies to input elements that are disabled. 
empty                   The rule applies to elements that have no children.
enabled                 The rule applies to input elements that are enabled. 
first-child             The rule applies to the first child element of a parent element. 
first-of-type           The rule applies to the first child element of the same type as the parent. 
focus                   The rule applies to elements that have the browser focus. 
hover                   The rule applies to elements that the mouse pointer is hovering over. 
in-range                The rule applies to elements whose value is within the specified range. 
invalid                 The rule applies to elements whose value is invalid.
lang(language)          The rule applies to elements with the lang attribute specified.
last-child              The rule applies to the last child element of a parent element. 
last-of-type            The rule applies to the last child element of the same type as the parent.
link                    The rule applies to unvisited hypertext lihnk elements. 
not(selector)           The rule applies to all elements except the specified selector elements. 
nth-child(n)            The rule applies to the nth child of the parent element. 
nth-last-child(n)       The rule applies to the nth child of the parent element counting backward from the last element. 
nth-of-type(n)          The rule applies to the nth child element with the same type as the parent. 
only-of-type            The rule applies to every element that is the only element of the same type as the parent.
only-child              The rule applies to every element that is the same only child of a parent. 
optional                The rule applies to input elements that do not have the required attribute. 
out-of-range            The rule applies to elements with a value out of the specified range.
read-only               The rule applies to elements with a readonly attribute specified. 
read-write              The rule applies to elements without a readonly attribute specified.   
required                The rule applies to elements with a required attribute specified.
root                    The rule applies to the documents's root element. 
target                  The rule applies to the current active element specified. 
valid                   The rule applies to elements that have a valid value. 
visited                 The rule applies to hypertext links that the site visitor has already visited. 

Applying style rules 
In book 1, Chapter 1, I discuss the different ways to apply CSS3 styels to an HTML5 document.
To refresh your memory, there are three ways three ways to do that: 

>> Inline styles: Place the style properties inside the HTML5 element opening tag, using the style attribute: 

<h1 style="color: red;"> Warning </h1>

>> Internal styles: Use the <style> tag to define a set of styles that apply to the entire document: 

<style>
h1 {color: red;}
</style>

>> External styles: Use an external file to contain the styel definitions, and then add the <link> tag in the HTML5 document to reference the external style sheet: 
<link rel="stylesheet" href="mystyles.css">

Note that with the inline style definitions, you leave off the selector part of the rule. 
Because the rule applies only to the element that declares it, there's no need for the selector. 
With both the inline and external styel sheet methods, you define the set of rules separately within the style sheet.
The great benefit of using the external style sheet method is that you can then apply the same style sheet to all the page of your website!

You can use any of these locatoins to define you style rules, or you can use them all at the same time!  
If two or more style rules apply to the same elemtn on the web page, the cascading feature of CSS3 kicks in. 
CSS3 defines a specific process on how the browser applies conflicting rules to an element to ensure everything happens in order. 
The next section explains how that works.

Cascading style rules 
As the name suggests, if you define multiple style rules for a web page, the rules cascade down from the lower-priority rules, which are applied first, to the higher-priority rules, which are applied later. 

TIP:
Saying "down" from a lower to a higher priority may seem counterintuitive, but it's common jargon ni CSS circles. 
Just remember that the higher-priority rules take precedence over the lower-priority rules.

The CSS3 standard defines a strict process for how browsers should apply style rules to each element. 
In Book 1, Chapter 1, I outline an abbreviated version of the cascading rules. 
There are actually ten different rule levels that the CSS3 standard defines for applying rules! 
However, most web designers don't use all ten levels to define rules, so things don't usually get that complicated. 

Table 2-3 shows the official CSS3 cascading rules process. 

Table 2-3          The CSS3 Cascading Rules Process 

Rule Type          Description                                                                               Priority Level
Importance         Rules contain the ! important property and override all other rule                        1
Inline             Rules defined using the style attribute in an element opening tag                         2
Media              Rules defined for a specific media type                                                   3
User defined       Accessibility features defined in the browser by the site visitor                         4
Specific selector  A selector referring to an id, class, pseudo-element, or pseudo-class                     5
Rule order         When multiple rules apply to an element, the last rule declared wins                      6
Inheritance        Rules inherited from parent elements in the web page                                      7
Internal           Rules defined in internal style sheets                                                    8
External           Rules defined in external style sheets                                                    9
Browser default    The default styles built into the browser, the lowest priority                            10


REMEMBER:
Notice that accessibility features have a special place in the cascading rule order.
Many Of your website visitors may have some type of viewing disability preventing them from viewing your content as you style it. 
Most browsers allow users to define their own style features, such as specifying foreground and background contrasting colors or changing the font size to make text more readable. 

Now that you've seen how to define CSS3 rules and where to define them, the next step is to start learning some rules to apply to your web pages.
The CSS3 standard defines a myriad of styles for you to use. 
Entire books have been written trying to cover all the different rules and features, such as CSS3 for Dummies by John Paul Mueller (Wiley).
The remaining sections in this chapter walk you through some of the more commonly used rules that you'll want to keep in mind as you design your dynamic web applications.


Styling Text
No place is styling more important than with the text taht appears on your web page.
You can transform a dull, boring website with just a few changes to the text styles. 
This section walks though the options you have available for styling text to help liven up your website. 

Setting the font 
A font defines how a medium displays the characters in the content. 
Whether it's etching words into stone, setting text on paper using a printing press, or displaying pixels on a computer monitor, fonts help control how readers interpret the content. 

When you place text on your web page using HTML5, the browser selects a default font style, size, and format based on the elemtn type, and it uses that same setting for all the text in those elements on your web page. 
That not only makes for a boring web page, but can also confuse your site visitors if all the content blends together. 

This section describes how you can change the font features the browser uses to display text in your web pages. 

Finding a family 
The CSS3 standard defines the font-family style property to allow you to change the style of font. 
Here's the format for the font-family property:

font-family: fontlist;

The fontlist value is a comma-separated list of font names. 
There are two ways to specify a font in the list:

>>Using a specific font name: 
Specific font names require the browser to use that specific font to display the text, such as Times New Roman, Arial, or Helvetica. 
Browsers are limited to using only the fonts that are installed on the workstation, so specifying a specific font name can be a gamble. 
If that font isn't available on the site visitor's workstation, the browser will revert to the default font. 
It has become common practice to provide several options of font names in the font-family property. 
The browser will try to use the font presented first in the list, and if that's not available, it'll try the next font listed, and continue down the list. 
If no font is available, the browser reverts to the default font.

>>Using a generic font group: Generic font groups give the browser a little more leeway in selecting a font to use. 
Instead of looking for a specific font, the browser can use any font that's included in the font group.
CSS3 defines the following font groups: 
*cursive: A font that mimics handwritten text
*fantasy: An ornamental font used for special text
*monospace: A font that uses the uses the same spacing for all characters 
sans-serif: A font without any ornamentation added to characters
serif: A font that uses ornamentation at the tail of each character.

It's common practice to list specific font names first in the font list and then, as a last resort add a generic font group like this:

font-family: Arial, 'Times New Roman', sans-serif;

With this rule, the browser will try to use the Arial font. 
If that's not available on the visitor's workstation, it will try to use the Times New Roman font.
If Times New Roman is also not available, the browser will look for a font from the sans-serif font group.

REMEMBER: 
Note that for font names that contain spaces, you must enclose the name in single quotes.

TIP: 
The CSS3 standard defines an exciting new feature called web fonts. 
Web fonts allow you to define your own font on a server so that browsers can download them along with the web page. 
I dive into using web fonts in more detail in Chapter 4 of this minibook.

Picking a size
After selecting a font style to use, the next step is to decide what size the font should be. 
Browsers have built-in sizes for separating out the different header levels, as well as standard text. 
However, you can change that by using the font-size property:

font-size: size;

You'd think specifying a font size would be easy, but CSS3 actually allows you to specify the size in one of five different methods:

>> As an absolute unit of measurement
>> As a relative unit of measurement
>> As a percentage of the space assigned to the element 
>> Using a size keyword 
>> Using a size keyword relative to the space assigned to the element. 

You specify absolute units using a specific size value of measurement. 
To complicate things even more, CSS allows you to use siz different units of measurements, shown in Table 2-4.


CSS Font-Size Absolute Units of Measurement

Unit            Description
cm              Centimeters
in              Inches
mm              Millimeters
pc              Picas
pt              Points
px              Pixels

The first three units of measurement shown in Table 2-4 are easily recognizable, but the last three aren't as common. 
There are 6 picas in an inch, and 72 points in an inch. 
The pixel unit originally matched up to pixels on a standard computer monitor,
But with the advancement of monitor technology, that isn't the case anymore. 

You can specify the size using either a whole number or a decimal value: 

font-size: 0.25in;
font-size: 48pt;

The relative units of measurement set the size of the font relative to other elements on the web page. 
Table 2-5 shows the relative size units in CSS3.

CSS Font-Size Relative Units of Measurement

Unit          Description
ch            Relative to the size of the zero character
em            Relative to the size of the normal font size of the elements
ex            Relative to the normal height of the font size currenly used 
rem           Relative to the height of the root element
vh            Relative to 1% of the browser window height 
vw            Relative to 1% of the browser window width 
vmax          Relative to 1% of the larger of the browser window width or height
vmin          Relative to 1% of the smaller of the browser window width or height
%             As a percentage of the normal element size

The em relative unit size is the most popular. 
It sizes the element relative to the text in the web page. 
For example, here's a common rule that you'll see: 

h1 {font-size: 2em;}

This tells the browser to size the h1 element twice the size of the text in the web page. 
By using relative units, you can easily change the size of headings based on the size of the text in the content. 
If you decide to change the font size of the text in the web page, the headings will automatically change size to stay in the same proportion. 

To make things simpler, CSS also allows you to set the text size using a human-readable keyword. 
There are both absolute and relative keywords available:

>> Absolute: xx-small, x-small, small, medium, large, x-large, xx-large
>> Relative: smaller, larger

Using the keywords makes setting font sizes easier, but you're still a little at the mercy of the browser.
It's up too the browser to deternmine just what is a small, medium, or lareg size font.

Playing with color
By default, browsers display all text in black on a white background.
Things don't get any more boring than that! 
One of the first steps in livening up your website is to change the text color scheme.

There are two CSS3 properties that you need to do that:

>> color: Selects the color the browser uses for the text font
>> background-color: Selects the color the browser uses for the background.

You have a vast palette of colors to choose from for your color scheme. 
Usually, it's a good idea to pick a color scheme for your website and try to stick with that for most of the web pages contained in the website.
Often, a corporation will set the color scheme of it website based on the colors used in the company logo.

Ocassionally, you may need some content to pop out at visitors, so you'll need to deviate some from the scheme.

The original CSS standard privided three ways to define colors used in styles:

>> With color names: Yuo can choose a text value from a standard list of color names. 
CSS3 defines many different colors by name. If you plan on using a standard color, most likely you can call it just by its name: 

p {color: red; background-color: white;}

>> With RGB hexadecimal values: If you want to fine-tune the colors your web page elements use, you can select the intensity of the red, green, and blue colors based on hexadecimal values from 00 to FF.
If you're into hexadecimal numbers, define the color as three hexadecimal values preceded by a pound sign: 

p {color: #ffa500;}

The ffa500 value sets the red hue at full intensity, sets the green hue a little lower, and turns the blue hue off, producing the orange color.

>> With the rgb() function: You can select the color using decimal values from 0 to 255 for the red, green, and blue intensities. 
To specify the same color using the rgb() method, you'd use the following: 

p {color: rgb(255, 165, 0);}

If you're not picky about the shade of red you want, the first method will work just fine. 
But odds are, you'll want to be more precise in your color selection (for example, matching the shade of red to the red in your company's logo), so you'll want to use one of the other two methods.
Which of the other two methods you use is a matter of personal preference. 

The updated CSS3 standard provides four new ways of working with colors in your web pages:

>> RGBA: adds an opacity value to the standard RGB settings
>> HSL: Defines the color as a hue, saturation, and lightness percentage
>> HSLA: Defines the color as an HSL value, plus adds an opacity value
>> Opacity: Defines a transparancy value to make the element more opaque.

The main addition to the CSS3 color scheme is the opacity feature.
The opacity feature provides the ability to make elements transparent, or faded. 
The opacity value ranges from 0.0 (fully transparent) to 1.0 (no transparency, also called opaque).

Here's an example to demonstrate just how changing colors in  elements works: 

1. Open your favorite text editor, program editor, or integrated development environment (IDE) package.

2. Enter the following code into the editor windows: 

<!DOCTYPE html>
<html>
<head> 
<title> Testing colors in CSS3 </title>
<style>
p {
    font-family: Arial, Helvetica, sans-serif;
    color: #ff0000;
    background-color: cyan;
}

h1 {
          color: rgb(255, 165, 0) ;
          background-color: green;
}

</style>
</head>
<body>
<h1>Testing the color scheme </h1>
<p>
The quick brown fox jumps over the lazy dog.
</p>
<h1> This is the end of the color test </h1>
</body>
</html>

Working with the box Model

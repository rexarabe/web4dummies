IN THIS CHAPTER:
>> Exploring your development options
>> Picking a development environment
>> Configuring the servers

Chapter 2:
Using a Web Server

Before you can start developing dynamic web appliactions, you'll need a web server environment to work in.
You have lots of different choices available to create your own development environment, but sometimes having more options just makes things more confusing.
This chapter walks through the different options you have for creating your development environment.

Recognizing What's Required
Just like that famous furniture that needs assembly, you'll need to assemble some separate components to get your web application development environment up and running.
There are three main parts that you need to assemble for your web development environment:

>> A web server to process requests from browsers to interact with your appliaction.
>> A PHP server to run the PHP server-side programming code in your appliction.
>> A database server to store the data required for your dynamic appliaction.

On the surface, this may seem fairly simple, but to make things more complicated, each of these parts has different options and versions available.
That can lead to literally hundreds of different combinations to wade through!

This section helps you maintain your sanity by taking a closer look at each of these three requirement.

THE WEB SERVER:
The web server is what interacts with your website visitors.
It passes their requests to your web application and passes your application responses back to them.
The web server acts as a file server - it accepts requests to your web application and passes your application responses back to them.
The web server acts as a file server - it accepts requests for PHP and HTML files from client browsers and then retrieves those files and sends them back to the client browser.
As I explain in the preceding chapter, the web server uses the HTTP standard to allow anonymous requests for access to the files on the server and respond to those requests.

There are quite a few different web sserver options around theses days.
Here are a few of the more popular ones that you'll run into:

>>Apache: The granddad of web servers, Apache was derived from the original web server developed at the University of Illinois.
It's an open-source software project that haas been and is currenlty the most commonly used web server on the Internet.
It is very versatile and supports lots of different features, but with versality comes complexity.
Trying to wade through the configuration file for an Apache web server can be confusing.
But for most web environments you just need to change a few of the default configuration settings.

>>nginx: The newer kid on the the block, nginx is intented to ease some of the complexity of the Apache web server and provide improved performance.
It's currently gaining in popularity, but it still has a long way to go to catch up with Apache.

>>lighthttpd: As its name suggests, lightttpd is a lightweight web server that's significantly less versatile and complex than the Apache web server.
it works gret for small development environments and is becoming popular in embedded systems that need a seb server with a small footprint.
However, it doesn't holdup well in large-scale production Web server environments and probably isn't a good choice for a web development environment.

>>IIS: ISS is the official Microsoft Web server. It's popular in Microsoft Windows server environments, but there aren't versions for other operating systems.
IIS focuses on supporting the Microsoft .NET family of server-side programming languages, such as C# .NET and Visual Basic .NET, but it can be interfaced with the PHP server.
This configuration is not common, though, and you don't see very many PHP servers that utilize the IIS web server.

As you can tell from these descriptions, just about every web server is compared to the Apache web server.
Apache has become the gold standard in Internet web servers.
Unless you have a specific reason for not using the Apache web server, you should use it for your development environment, especially if you know that your production web server environment will use it.

THE PHP SERVER
The PHP programming language began in 1995 as a personal project by Rasmus Lerdorf to help his web pages access data stored in a database.
He released the first official version 1.0 to the open-source community on June 8, 1995.

Since then, the PHP language has taken on a life of its own, gaining in both features and popularity.
The development of the PHP language is currently supported by Zend, which produces many PHP tools.

One of the most confusing aspects of the PHP server is that there are currently two different actively supported branches of the PHP language:

>> The version 5.x branch
>> The version 7.x branch

The first question that often comes to mind is: "What happened to version 6?"
The short-lived version 6 of PHP has some unresolvable issues and was officially abandoned by the PHP developers, with the new featurtes rooled back into version 5.

Now for the second question; "Why two active version?"
The version 5.x branch is still maintained mainly because of the great wealth of appilcations that continue to use features supported in versino 5.x, but not in version 7.x.
It will take some time before all the old 5.x applications will be migrated to version 7.x code.
UNfortunately, version 7 of PHP breaks quite a few thigns that were popular in the 5.x version.
However, the PHP developers are no longer performing bug fixes in the 5.x branch, only security patches.
At the time of this writing, the current version in the 5.x branch is 5.4 and will be maintained until the end of 2018.

At the time of this writing, many popular web server packages support both the 5.x and 7.x version branches and will give you the choice of which one to use for your installatino.
If you're developing new dynamic web applications, it's best to use the 7.x version branch; at the time of this writing, the latest version is 7.2.

The Php server contains its own built-in web server, but that's only intended for development and not for use as a live prodution web server.
For large-scale use, you must interface the PHP server with a web server.
As the web server receives requests for .php files, it must pass them to the PHP server for processing.
You must set up this feature as part of the web server configuration file.
This is discussed later in this chapter in the "Customizing the Apach Web Server" section.

Warning:
You may still run into some web-hosting compnies that use PHP version 4.
This was a very popular and long-running version, but it's no longer supoprted by PHP with security patches.
It's best to stay away from any web host that only supports PHP version 4.


THE DATABASE SERVER
As I describe in Chapter 1 of this minibook, there are many different types of database servers to handle data for your web applications.
But far the most popular used in open-source web applications is the MySQL server.

Many websites and web packages use the term MySQL Server, but there are actually a few different versions of it.
Because Oracle acquired the MySQL project in 2010, it has split the project into four versions:
>> MySQL Standard Edition: A commerical product that provides the minimal MySQL database features.
>> MySQL Enterprise Edition: A commercial product that provides extra support, monitoring, and maintenance features.
>> MySQL Cluster Carrier Grade Edition: A commercial product that in addition to the Enterprise Edition features, supports multi-server clustering.
>>MySQL  community Edition: The freely downloadable version of MySQL that support the same features as the Standard Edition, but with no formal support.


As you can see from the list, the MySQL server has both commercial and open source versions.
The commercial versions support some advanced features that aren't available in the Open Srouce version, such as hot backups, database activity monitoring and being able to implement a read/write database cluster on multiple servers.
These advanced features can come in handy  in large-scale database environments, but for most small to medium-size database applications, the MySQL community Edition is just fine.
That's what's usually included in most web server packages.

Just as with PHP, the MySQL project maintains multiple versions of the MySQL server software. At the time of this writing, the currently suported versions of MySQL are

>> Version 5.5
>> Verstion 5.6
>> Version 5.7

the technical stuff:--------------------------------------------------------------------------------------------------------------------------------------------------------------------V
MYSQL AND MariaDB
The MySQL serer project has had quite an intersting life.
It was originally developed in 1994 as an open source project by a Swedish company, MySQL AB.
It gained in popularity and features, until MYSQL AB was purchased by Sun Microsystems in 2008.
However, Oracle purchased Sun Microsystems in 2010 and took control over the MySQL project.

When Oracle purchased the rights to MySQL from Sun Microsystems, the main MySQL developper and his team left to start their own seprate open-source branch of MySQL, called MariaDB.
With the terms of the open-srouce license, this move was completely legal, and the project has gained some respect and following in the open-source community.
MariaDB is nearly 100 percent compatible with MYSQL and is often used as a direct replacement for the MySQL Community Edition in some environments.
Any PHP code that you write to interct with the MySQL server will also work with the MariaDB server.
Don't be alarmed if the development environment you use switches to MariaDB!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^

Each version has some minor updates to the MySQL database engine but for most dynamic web applications, the differneces won't play a significant role in your applicatio performance or functions, so it won't matter much which of these three versions your system uses.

Several cloud providers (including Oracle itself) provide the MySQL server as a cloud service.
Instead of installing and running your own MySQL server you can rent space on their MySQL cloud server.
The benefit of running MySQL in the cloud is that you're guaranteed perfect up-time for the database, because it's distributed among multiple servers in the cloud.
The downside, though, is that this can get exxpensive and is only recommended for commercial web applications that require the extra server power provided by the cloud.



CONSIDERING YOUR SERVER OPTIONS
Now that you know you'll need a web server, a PHP server, and a MySQL server for your development work, the next step is trying to find an environment that supports all three (and it would helop if they were all integreted).
You basically have three options for setting up a complete web programming development environment:

>> Purchase space on a commercial server from a web-hosting company.
>> Install the separate servers on your own workstation or server.
>> Install an all-in-one package that bundles all three servers for you.

Using a web-hosting company
By far, the easiest method of setting up PHP programming environment is to rent space on an existing server that has all the necessary compnoents already installed.
Plenty of companies offer PHP web development packages.
Some of the more popular ones are
>> GoDaddy(www.godaddy.com)
>>HostGator(www.hostgator.com)
>>1&1(www.1and1.com)
>>000webhost(www.000webhost.com)

These large web-hosting companies offer multiple levels of support for their services.
Often, they'll offer several tiers of service based on the number od databases you can create, the amount of data that you can store, and the amount of network bandwidth your web applications are allowed to consume per month.
That way, you can start out with a basic package for minimal cost and then upgrade to one of the more expensive packages as your Internet application takes off!
It pays to shop around to check differnt pricing sturctures and support levels at the different web-hosting companies.

Besides these main competitors, you'll find many, many smaller web hosting companies willing to offer MySQL/PHP packages to host your applications.
There's a good change if you already have a web-hosting company you use to host your static web pages, it'll have some type of MySQL/PHP support.
If you already have spcae on a web server for your website check with them to see if they an upgrade to MySQL/PHP package.

With the popularity of the new "cloud" environment where everythings runs on shared server space, there are now a few more participants in the PHp server hosting game.
The Wikipedia web page for cloud service providers lists more than 200 different providers! You'll probably recognize the more popular ones:

>>Amazon Web Services (AWS)
>>Google Cloud Platform
>>Oracle Cloud Platform
>>Microsoft Azure

Each of these cloud services provides some level of support for PHP program development.
One of the main benefits of utilizing a cloud service is that your application is hosted on multiple servers that share the traffic load and are redundant for backup purposes.
If a server in the cloud crashes, your application will still work on other servers.
Of course, be prepared to pay a premium price for those features!

WARNING/ACHTUNG!!!:
Be careful with some of the smaller web-hosting companies.
These days, just about anyone can install the PHP and MySQL server software onto a server and sell sapce, so many "mom-and-pop" web-hosting companies now provide this service.
However, installing the server programs is different from maintaining the server programs.
Often, you'll find these smaller web-hosting sites use outdated server versions that haven't been upgraded or patched with security updates, making them vulnerable to attacks.

Building your own server environment

I wouldn't recommand it for a live production website, but for development work you can build your own web server environment.
You don't even need to have a large server for a personal web development envrionment -you can build it using your existing Windows or Apple workstation or laptop.

The following sections walk you throuhg the basics you need to know to get this working in either the Linux or Windows/Mac environments.

Web servers in Linux
Linux desktops and servers are becoming more popular these days, especially for web development.
You can download the Apache, MySQL, and PHP server source code pacakges and compile them on your Linux system, but unless you need the absolute latest version of things, that's not the recommended way to do it.

These days, most Linux distributions include packages for easily installing all the components you need for a complete web development environment.
For Debian-based Linux distributions (such as Ubuntu and Linux Mint), you use the apt get command-line tool to install software packages.
For Red Had-based Linux distributions (sucha as Red Hat, CentOS, and Fedora) you use the dnf command-line tool.

For Debian-based systems, such as Ubuntu, follow these steps to do that:
1. From a command prompt, install the Apache Web server using the following command:
2. Install the MySQL server pacakge using the following command:
sudo apt-get install mysql-server

Warning//Achtung!!!
During MySQL server installation, you'll be prompted for a password to use for the root user account.
The root user account in MySQL has full privileges to all tables and objects.
Make sure you remember what password you enter here!

3. Install the PHP packages to install the PHP server and required extensions, the Apache modifications to run PHP, and the graphical phpmyAdmin tool:
sudo apt-get install php libapache2-mode-php
sudo apt-get install php-mcrypt php-mysql
sudo apt-get install phpmyadmin

The first line installs the main PHP server, along with the Apache module to interface with the PHP server.
The second line installs two PHP extensions that are erquired to interface with the MySQL server.
The third line installs the web-based phpMysAdmin PHP program, which provides a web interface to the MySQL Server.

4. Open s browser and test things out by going to the following URL:
http://localhost/phpadmin

You should be greeted by the phpMyAdmin adminstrattion window.

5. Log in using the MySQL root user account and the password you supplied when you installed MySQL (you remember it, right?).
Figure 2-1 shows the main phpMyAdmin web page, which shows what versions of the Apache, PHP, and MySQL servers are running.

Figure 2-1:
The main phpMyAdmin web page showing everything that is running.

For Red Hat-based systems, such as Fedora and CentOS, follow these steps to load Lamp:
1. From a command prompt, insatll the Apache web server using the following commands:
sudo dnf install httpd
sudo systemctl enable httpd
sudo systemctl start httpd

The httpd package includes the Apache2 web server.
The executable file for Apache is named httpd (thus, the name of the package).
The package doesn't start the Apache wev server by default, so the second two lines use the systemctl utility to enable the service so it starts automatically at boot time and then starts it.

2. Install the MySQL server package using the following commands:
sudo dnf install mariadb-server
sudo systemctl enable mariadb
sudo systemctl start mariadb

Notice that the Red Hat distribution (and thus CentOS and Fedora) has gone with the MariaDB replacement package for MySQL.
When you install MariaDB, the pacakge sets the root user accound password to an empty string.
This is not recommended if your server is on any type of network.
Fortunately, there's a quick utility that you can run to change the root user account's password:
mysql_secure_installation
When you run this script, it'll prompt you to answer a few questions, such as the new password for the root user acount, whether to restrict the root user account to only logging in from the local host, whether to remove to anonymous users feature, and whether to remove the test database.

3. Instal the PHP pacakegs using the following commands:
sudo dnf install php php-mbstring php-mysql
sudo dnf install phpmyadmin
sudo systemctl restart httpd

The PHP server doesn't run as its own service - the Apache web server spawns it when needed.
Because of that, you do need to use the systemctl utility to restart the Apache web server so it rereads the configureation file with the new PHP settings.

4. Open a browser and test things out by going to the following URL:
http://localhost/phpmyadmin
You should see the phpMyAdmin login page.

5. Log in using the root user account in MySQL along with the password you defined when you installed MySQL.
Figure 2-2 shows phpMyAdmin running on a CentOS 7 system.

TIPS:
By using the distribution software packages for each server, you're guaranteed that the sever will run correctly in your Linux environment.
An additional benefit is that the distribution software updates will include any security patches or bug fixes released for the servers automatically.

Web server in Windows and Mac
Installing and running the Apache, MySQL, and PHP serves in a Windows or Mac environment is very tricky, because there are lots of factors involved in how to install and configure them.
For starters, both Windows and macOS come with a web server built in, sod if you install the Apache web server you'll need to configure it to use an laternative TCP port.

Figure 2-2:
Viewing the phpMyAdmin main web page on Fedora 27.

Likewise, macOS includes and older version of PHP by default, so if you install an updated version of PHP, things get tricky trying to make sure which version is active.

Because of these complexities, it's not recommended for beginners to install the Apache, MySQL, and PHP packages separately in the Windows and Mac environments.
There's a much simpler way of getting that to work, which I'll describe in the next section.

Using premade servers
Trying to get a working Apache, MySQL, and PHP server in Windows (called WAMP) or in the Mac environment (called MAMP) can be a complicated process.
There's a lot of work downloading each of the individual server packages, configuring them, and getting things to work together.

Fortunately, some resrouceful programmers have done that work for us!
There are quite a few open-source packages that bunclde the Apache web server, MySQL (or MariaDB) server, and PHP server together to instakll as a single package.
This is by far the best way to go if you plan on using your Windows or Mac workstation or laptop as your web development environment.

There are quite a few pre-loaded packages available, but these are the most common ones:

>> XAMPP: An all-in-one package that supports PHP and Perl server-side programming and also includes an email and FTP server, along with a sself-signed certificate to use the Apache web server in HTTPS mode.
it has installation packages available for Windows, MAC, and Linux.

>> Wampserver: A Windows-based all-in-one package that allows you to install multiple versions of the Apache, MySQL, and PHP servers at the same time.
You can the mix-and-match which versions of which server you have active at any time, allowing you to duplicate almost any web-hosting environment.

>> MAMP: A Mac-based all-in-one package that is easy to install and use.
It also has a commercial package called MAMP Pro that provides additional features for managing your web environment for professional developers.

Of these, the XAMPP package is by far the most popular.
It was created by the Apache Friends organization to help promote the use of the Apache web server in web development environments.
Follow these steps to install XAMPP in a Windows or macOS environment:

1. Open your browser and go to www.apachefriends.org.
2. Look for the Download section of the web page and click the link for the OS you're using.
3. After the download finishes, run the downloaded file in your OS environment .

This starts the XAMPP installation wizard.

4. Click the Next button to go to the Select Components window, shown in Figure 2-3.
The Select Components window allows you to select which components in XAMPP you want installed.
You won't use everything contained in XAMPP for this book, but feel free to install the entire package and explore on your own!

5. Click the Next button to continue the installation.
6. Select the installation folder for XAMPP.

The default location for Window is c:\xamppp; for macOS, it's /Applications/XAMPP.
Those will work just fine for both environments.

7. click the Next button to continue the installation.
The Apache Friends organization has teamed up with Bitnami, which has prepackaged many popular web applications specifically for use in XAMPP.

Figure 2-3:
The XAMPP Select Components window in the installation wizard.

8. You can learn more about Bitnami by leaving the Learn More about Bitnami for XAMPP check box checked, or if you'd like to skip this step, remove the ckeck mark from the ckeck box, and then click the Next button to continue.
9. Click the Next button to begin the software installation.
10. You can keep the check mark in the check box to start XAMPP, and then click the Finish button to end the wizard.

The XAMPP Control Panel provides easy access to start, stop, and configure each of the serfers contained in the XAMPP package.
Figure 2-4 shows the main COntrol panel window.

Figure 2-4:
The main XAMPP Control Panel window.

By default, XAMPP configures the Apache web server to use TCP port 80 for HTTP connections.
Unfortunately, this port is often in use by web servers built into Windows and mac workstatiosn and servers.
This will produce an error message wehn you first start the XAMPP Control Panel, as show in FIgure 2-4

You can move the Apache web server to an alternative TCP port.
Just Follow these steps.
1. From teh XAMPP Control panel main window, click the Config button for the Apach web server.
2. Select the menu option to edit the httpd.conf configuration file.
This opens the Apache web server configuration file in a test editor.
3. Look for the line:
listen 80

4. change the 80 in the line to 8080, a common alternative TCP port to use for HTTP communications.
5. Sasve the updated configuation file in the editor, and then exit the editor window.
6. Click the Start button for the Apache web server.

The apche web server should indicate that it has started and is using both TCP port 443 (for HTTPS) and 8080 (for HTTP).

7. Click the start button for the MySQL database server.
The MariaDB database server should indicate that it has started and is using TCP Port 3306 (the defautl TCP port for MYSQL).

After the Apache and MySQL servers starts, you can exit the XAMPP Control Panel.
If you need to stop the servers, reopen the XAMPP Control Pnael and click the Stop buttons for both servers.

Tip:
Although you've moved the Apache web server in the configuration file, XAMPP will still check to see if TCP port 80 is available when you start the XAMPP Control Panel and complain that it's not available.
To stop that, click the COnfig button in the control Panel and then remove the check mark for the Check default POrts on Startup check box.

Tweaking the Servers

When you get the Apache, MySQL, and PHP servers installed in your development environment, you may need to do a little bit of tweaking to get them working just the way you want.
Each of the servers uses a text configuration file to define just how the server behaves.
The following sections walk you through how to find the configuration files and some of the settings that you may need to tweak for your development environment.

Customizing the Apache Server
By default, the Apache Web server uses the httpd.conf condfiguration file to store its settings.
For Linux and Mac systems, the file is usually stored in the /etc folder structure, often under either /etc/httpd or /etc/apache2.

Tip:
The XAMPP package installs the Apache configuration file in the c:\xampp\apache\conf folder in Windows or /Applications/XAMPP/apache/conf in macOS.

The httpd.conf configuration file contains individual lines called directives.
Each directive defines one configuration option, along with the value that you set.

The Apache web server is very versatile, with lots of different options and features.
The downside to that is it can make the configuration seem complex at first, but the configuration file is organized such that you should be able to find what you're looking for relatively easily.
In the following sections, I cover a few things that you'll want to pay attention to.

WARNING///ACHTUNG!!!
Many systems break the Apache web server configurations into multiple files to help make the features more modular.
Look for the Include directive lines in the main httpd.conf configuration file to see what other files contain Apache web server configuration settings.

Defining the web folder location:

The main job of the Apache web server is to serve files to remote clients.
However, you don't want just anyone retrieving just any file on your system!
To limit what file the Apache server serves, you must restrict it to a specific folder area in the system.

You set the folder where the Apache web server serves files using the Document-Root directive:

DocumentRoot c:/xampp/htdocs

The htdocs folder is the normal default used for the Apache web server in Windows and macOS environments (for macOS, it's located in /Applications/XAMPP/htdocs).
For Linux environments, it has become somewhat common to use /var/www/html as the DocumentRoot folder.

Warning//Achtung
If you  choose to move the DocumentRoot folder to another folder location on the server, make sure the user account that runs the Apache web server has access to at least read files from the folder.

Setting the default TCP port
The Apache web server listens for incomming connections from client browsers using two different default TCP network ports:

TCP port 80 for HTTP requests
TCP port 443 for HTTPS requests.

HTTPS requests use encryption to secure the communication between the browser and the server.
This method is quickly becoming a standard for all web servers on the Internet.

You set the ports the Apache web server accetps incoming requests on using the Listen directive:

Listen 80
Listen 443

USING ENCRYPTION
To establish a secure HTTPS connection, your Apache web server must have a valid encryption certificate  signed by a certificate authority.
The certificate authority recognizes your website as valid and vouches for your authenticity.
This enables your website visitors to trust that you are who you say you are and that your web server is what it says it is.

Unfortunately, signed certificates must be purchased and can be somewhat expensive.
For development work, you can use a self-signed certificate.
The self-signed certificate is what it says: You sign your own certificate.
This doesn't instill any trust in your website visitors, so don't use a self-signed certificate on a production website - only use it for development.
The XAMPP web server installs a self-signed certificate just for this purpose!

Interacting with the PHP server

The Apache web server must know how to pass files that contains PHP code to the PHP server for processing.
This is a two-step process.

First, you have to tell the Apache web server to load the PHP server module so that it can establish the link between the Apache and PHP servers.
You do that that using the LoadModule directive:

LoadModule php7_module "c:/xampp/php/apache2_4.dll"

After Apache loads the PHP module, you have to tell it what type of files to send to the PHP server.
You do this using the AddHandler directive:

AddHandler application/x-httpd-php .php

This directive tells the Apache web server to forward all files with the .php file extensions to the PHP module, which then forwards the files to the PHP server for processing.

Warning/achtung!!

It may be tempting to just forward all .html files to the PHP server, because the PHP server will pass any HTML code directly to the client browser.
However, this will add extra processing time to load your static web pages, causing a performance issue with your HTML pages.

Tracking errors
When working in a development environment, it's always helpful to be able to track any errors that occur in your applications.
The Apache web server supports eight different levels of error messages, shown in  Table 2-1.

Table 2-1      Apache Web Server Error Levels

Error Level           Description

emerg                 A fatal error will halt the Apache web server.
alert                 A servere error will have an adverse impact on your application and should be resolved immediately.
crit                  A critical condition caused the operation to fail, such as a failure to access the network.
error                 An error occured in the session, such as an invalid HTTP header.
warn                  A minor issue occured in the session but didn't prevent it from continuing
notice                Something out of the normal occured.
debug                 A low-level detailed message occurs for each step the server takes in processing a request.

You define the level of error tracking using the Loglevel directive and the location of error log using the ErrorLog directive:
